<% content_for :title, "Friends" %>

<div class="friends-index-container py-5">
  <div class="container">
    <!-- Page Header -->
    <div class="page-header mb-4">
      <div class="row align-items-center">
        <div class="col-lg-6">
          <h1 class="page-title mb-1">Friends List</h1>
          <p class="page-subtitle text-muted">Manage your connections</p>
        </div>
        <div class="col-lg-6 d-flex justify-content-lg-end mt-3 mt-lg-0">
          <%= link_to new_friend_path, class: "btn btn-primary" do %>
            <i class="bi bi-plus-lg me-2"></i>Add New Friend
          <% end %>
        </div>
      </div>
    </div>
    
    <!-- Search & Filter -->
    <div class="card shadow-sm mb-4 border-0">
      <div class="card-body">
        <div class="input-group search-container">
          <span class="input-group-text bg-light border-0">
            <i class="bi bi-search"></i>
          </span>
          <input type="text" id="friendsSearch" class="form-control bg-light border-0" placeholder="Search by name, email or phone...">
          <!-- Placeholder for clear button to prevent layout shifts -->
          <span class="input-group-text bg-light border-0 clear-search-placeholder d-none">
            <i class="bi bi-x-circle"></i>
          </span>
        </div>
      </div>
    </div>

    <!-- Friends Table -->
    <div class="card shadow-sm border-0">
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-hover friends-table mb-0">
            <thead>
              <tr>
                <th scope="col" class="ps-4">Name</th>
                <th scope="col">Contact Information</th>
                <th scope="col" class="text-end pe-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% @friends.each do |friend| %>
                <% if friend.user == current_user %>
                  <tr class="friend-row">
                    <td class="ps-4">
                      <div class="d-flex align-items-center">
                        <div class="friend-avatar me-3">
                          <%= friend.first_name[0] %><%= friend.last_name[0] %>
                        </div>
                        <div>
                          <h6 class="mb-0"><%= friend.first_name %> <%= friend.last_name %></h6>
                          <% if friend.twitter.present? %>
                            <small class="text-muted"><i class="bi bi-twitter me-1"></i><%= friend.twitter %></small>
                          <% end %>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div class="contact-info">
                        <div class="contact-item">
                          <i class="bi bi-envelope text-muted me-2"></i>
                          <%= friend.email %>
                        </div>
                        <% if friend.phone.present? %>
                          <div class="contact-item mt-1">
                            <i class="bi bi-telephone text-muted me-2"></i>
                            <%= friend.phone %>
                          </div>
                        <% end %>
                      </div>
                    </td>
                    <td class="text-end pe-4">
                      <div class="d-flex justify-content-end gap-2">
                        <%= link_to friend, class: "btn btn-sm btn-outline-primary" do %>
                          <i class="bi bi-eye"></i>
                        <% end %>
                        
                        <%= link_to edit_friend_path(friend), class: "btn btn-sm btn-outline-secondary" do %>
                          <i class="bi bi-pencil"></i>
                        <% end %>
                        
                        <%= button_to friend, method: :delete, 
                            data: { turbo_method: :delete, turbo_confirm: 'Are you sure you want to delete this friend?' }, 
                            class: "btn btn-sm btn-outline-danger" do %>
                          <i class="bi bi-trash"></i>
                        <% end %>
                      </div>
                    </td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    
    <!-- Empty State (shown when no friends found) -->
    <div id="emptyState" class="text-center py-5 d-none">
      <div class="empty-icon mb-3">
        <i class="bi bi-people text-muted" style="font-size: 4rem;"></i>
      </div>
      <h3>No Friends Found</h3>
      <p class="text-muted mb-4">Try changing your search term or add a new friend</p>
    </div>
  </div>
</div>

<% content_for :head do %>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    .friends-index-container {
      min-height: calc(100vh - 80px);
      background-color: #f8fafc;
    }
    
    .page-title {
      font-size: 2rem;
      font-weight: 700;
      color: #1e293b;
    }
    
    .page-subtitle {
      font-size: 1.125rem;
    }
    
    .card {
      border-radius: 0.75rem;
      overflow: hidden;
    }
    
    /* Fixed size for search container to prevent layout shifts */
    .search-container {
      position: relative;
      width: 100%;
    }
    
    /* Set a fixed width for the friends table container */
    .table-responsive {
      width: 100%;
      overflow-x: auto;
    }
    
    .friends-table {
      margin: 0;
      width: 100%;
      table-layout: fixed;
    }
    
    .friends-table thead th {
      background: #f8fafc;
      padding: 1rem 0.75rem;
      font-weight: 600;
      color: #64748b;
      border-bottom: 1px solid rgba(0,0,0,0.05);
    }
    
    .friends-table tbody tr {
      transition: all 0.2s ease;
    }
    
    .friends-table tbody tr:hover {
      background-color: rgba(59, 130, 246, 0.04);
    }
    
    .friends-table td {
      padding: 1rem 0.75rem;
      vertical-align: middle;
      border-color: rgba(0,0,0,0.05);
    }
    
    /* Set explicit column widths */
    .friends-table th:nth-child(1),
    .friends-table td:nth-child(1) {
      width: 35%;
    }
    
    .friends-table th:nth-child(2),
    .friends-table td:nth-child(2) {
      width: 45%;
    }
    
    .friends-table th:nth-child(3),
    .friends-table td:nth-child(3) {
      width: 20%;
    }
    
    .friend-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .contact-info {
      font-size: 0.875rem;
    }
    
    .contact-item {
      display: flex;
      align-items: center;
    }
    
    /* Search styles */
    .input-group .form-control {
      transition: all 0.3s ease;
      height: 46px;
    }
    
    .input-group-text {
      height: 46px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .search-active .form-control,
    .form-control:focus {
      background-color: white !important;
      border-color: #3b82f6 !important;
      box-shadow: 0 0 0 0.25rem rgba(59, 130, 246, 0.1) !important;
    }
    
    .search-active .input-group-text {
      background-color: white !important;
      border-color: #3b82f6 !important;
      color: #3b82f6 !important;
    }
    
    .clear-search,
    .clear-search-placeholder {
      cursor: pointer;
      transition: all 0.2s ease;
      color: #64748b;
      width: 46px;
    }
    
    .clear-search:hover {
      color: #ef4444;
    }
    
    /* Button styles */
    .btn-primary {
      background-color: #3b82f6;
      border-color: #3b82f6;
      transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
      background-color: #2563eb;
      border-color: #2563eb;
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .btn-outline-primary {
      color: #3b82f6;
      border-color: #3b82f6;
    }
    
    .btn-outline-primary:hover {
      background-color: #3b82f6;
      color: white;
    }
    
    .btn-outline-danger {
      color: #ef4444;
      border-color: #ef4444;
    }
    
    .btn-outline-danger:hover {
      background-color: #ef4444;
      color: white;
    }
    
    /* Form controls */
    .form-control:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 0.25rem rgba(59, 130, 246, 0.25);
    }
    
    /* Empty state styling */
    #emptyState {
      width: 100%;
      padding: 3rem 1rem;
      background: white;
      border-radius: 0.75rem;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .page-title {
        font-size: 1.75rem;
      }
      
      .friends-table thead th:nth-child(2), 
      .friends-table tbody td:nth-child(2) {
        display: none;
      }
      
      .friends-table td {
        padding: 0.75rem;
      }
      
      .friends-table th:nth-child(1),
      .friends-table td:nth-child(1) {
        width: 60%;
      }
      
      .friends-table th:nth-child(3),
      .friends-table td:nth-child(3) {
        width: 40%;
      }
    }
  </style>
<% end %>

<!-- Include search functionality directly -->
<script>
  // Function to initialize search functionality
  function initializeSearch() {
    const searchInput = document.getElementById('friendsSearch');
    const friendRows = document.querySelectorAll('.friend-row');
    const emptyState = document.getElementById('emptyState');
    
    if (searchInput) {
      // First, remove any previously attached event listeners
      searchInput.removeEventListener('keyup', performSearch);
      searchInput.removeEventListener('focus', handleFocus);
      searchInput.removeEventListener('blur', handleBlur);
      searchInput.removeEventListener('input', handleInput);
      
      // Function for search filtering
      function performSearch() {
        const searchTerm = this.value.toLowerCase();
        let anyVisible = false;
        
        friendRows.forEach(row => {
          const content = row.textContent.toLowerCase();
          
          if (content.includes(searchTerm)) {
            row.style.display = '';
            anyVisible = true;
          } else {
            row.style.display = 'none';
          }
        });
        
        if (anyVisible) {
          emptyState.classList.add('d-none');
        } else {
          emptyState.classList.remove('d-none');
        }
        
        // Also update the active state of the search field
        updateSearchVisuals();
      }
      
      // Function for focus visual indicator
      function handleFocus() {
        this.parentNode.classList.add('search-active');
      }
      
      // Function for blur visual indicator
      function handleBlur() {
        if (this.value === '') {
          this.parentNode.classList.remove('search-active');
        }
      }
      
      // Function to update search visuals based on content
      function updateSearchVisuals() {
        if (searchInput.value !== '') {
          searchInput.parentNode.classList.add('search-active');
          if (clearButton) {
            clearButton.classList.remove('d-none');
            document.querySelector('.clear-search-placeholder').classList.add('d-none');
          }
        } else {
          if (!searchInput.matches(':focus')) {
            searchInput.parentNode.classList.remove('search-active');
          }
          if (clearButton) {
            clearButton.classList.add('d-none');
            document.querySelector('.clear-search-placeholder').classList.add('d-none');
          }
        }
      }
      
      // Function for showing/hiding clear button
      function handleInput() {
        updateSearchVisuals();
      }
      
      // Attach event listeners
      searchInput.addEventListener('keyup', performSearch);
      searchInput.addEventListener('focus', handleFocus);
      searchInput.addEventListener('blur', handleBlur);
      searchInput.addEventListener('input', handleInput);
      
      // Clean up any existing clear button
      const existingClearButton = document.querySelector('.clear-search');
      if (existingClearButton) {
        existingClearButton.remove();
      }
      
      // Add a clear search button
      const inputGroup = searchInput.closest('.input-group');
      const clearButton = document.createElement('span');
      clearButton.className = 'input-group-text bg-light border-0 clear-search d-none';
      clearButton.innerHTML = '<i class="bi bi-x-circle"></i>';
      inputGroup.appendChild(clearButton);
      
      // Hide the placeholder when the actual button is shown
      document.querySelector('.clear-search-placeholder').classList.add('d-none');
      
      clearButton.addEventListener('click', function() {
        searchInput.value = '';
        // Trigger the keyup event to run the search
        searchInput.dispatchEvent(new Event('keyup'));
        updateSearchVisuals();
      });
      
      // Ensure the search field looks right initially
      updateSearchVisuals();
    }
  }

  // Initialize on DOMContentLoaded (for first page load)
  document.addEventListener('DOMContentLoaded', initializeSearch);
  
  // Initialize on Turbolinks load (for navigation between pages)
  if (typeof Turbolinks !== 'undefined') {
    document.addEventListener('turbolinks:load', initializeSearch);
  }
  
  // Initialize on Turbo load (for Hotwire/Turbo navigation)
  if (typeof Turbo !== 'undefined') {
    document.addEventListener('turbo:load', initializeSearch);
  }
  
  // Also handle potential custom reload events
  document.addEventListener('page:load', initializeSearch);
  document.addEventListener('ajax:success', initializeSearch);
</script>
